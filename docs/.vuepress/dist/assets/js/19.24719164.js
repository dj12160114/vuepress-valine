(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{211:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"javascript基础知识"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javascript基础知识","aria-hidden":"true"}},[t._v("#")]),t._v(" JavaScript基础知识")]),t._v(" "),a("h3",{attrs:{id:"_1-javascript组成部分"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-javascript组成部分","aria-hidden":"true"}},[t._v("#")]),t._v(" 1. JavaScript组成部分")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("ECMAScript")]),t._v(": JavaScript的核心，描述了语言的基本语法，由 Ecma 国际（前身为欧洲计算机制造商协会，European Computer Manufacturers Association）标准化的程序设计语言。")]),t._v(" "),a("li",[a("strong",[t._v("文档对象模型(DOM)")]),t._v("：DOM 是 HTML 和 XML 的应用程序接口，把整个页面桂花城由节点层级构成的文档。")]),t._v(" "),a("li",[a("strong",[t._v("浏览器对象模型(BOM)")]),t._v("：对浏览器窗口进行访问和操作。")])]),t._v(" "),a("h3",{attrs:{id:"_2-数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-数据类型","aria-hidden":"true"}},[t._v("#")]),t._v(" 2. 数据类型")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("原始值")]),t._v(" "),a("ul",[a("li",[t._v("boolean")]),t._v(" "),a("li",[t._v("null")]),t._v(" "),a("li",[t._v("undefined")]),t._v(" "),a("li",[t._v("number")]),t._v(" "),a("li",[t._v("string")])])]),t._v(" "),a("li",[a("strong",[t._v("引用值")]),t._v(" "),a("ul",[a("li",[t._v("对象")])])]),t._v(" "),a("li",[t._v("原始值和引用值的区别在于 "),a("strong",[t._v("存储的位置")]),t._v(" 和 "),a("strong",[t._v("访问的方式")]),t._v(" 不同。\n"),a("ul",[a("li",[a("strong",[t._v("原始值")]),t._v(" 是存储在栈中的简单数据，"),a("strong",[t._v("引用值")]),t._v(" 是存储在堆中的对象数据。")]),t._v(" "),a("li",[t._v("当用变量名访问 "),a("strong",[t._v("原始值")]),t._v(" 时，会直接访问到其存储在栈中的数据。")]),t._v(" "),a("li",[t._v("当用变量名访问 "),a("strong",[t._v("引用值")]),t._v(" 时，会首先获取存储在栈中的对象地址，根据地址再向堆中查找真正的对象数据。")]),t._v(" "),a("li",[a("strong",[t._v("原始值")]),t._v(" 所占的内存大小一般是固定不变的，"),a("strong",[t._v("引用值")]),t._v(" 所占的内存通常较大并且不固定，但其地址所占的内存大小是固定不变的。")])])])]),t._v(" "),a("h3",{attrs:{id:"_3-对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-对象","aria-hidden":"true"}},[t._v("#")]),t._v(" 3. 对象")]),t._v(" "),a("h4",{attrs:{id:"_3-1-属性命名规则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-属性命名规则","aria-hidden":"true"}},[t._v("#")]),t._v(" 3.1 属性命名规则")]),t._v(" "),a("p",[t._v("对象的情况和数组类似，唯一的不同是它的键的类型是自定义的。也就是说，我们的索引方式不再局限于数字了。")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" hero "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    breed"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Turtle'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    occupation"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Ninja'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("p",[t._v("有时候，可以在属性名上面加一对引号（单引号、双引号都可以）。如下三行代码所定义的内容完全相同。")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" o "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" prop"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" o "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'prop'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" o "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"prop"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[a("strong",[t._v("通常不建议在属性名上加引号，但在以下情况的时候，引号是必须的。")])]),t._v(" "),a("ul",[a("li",[t._v("属性名是 "),a("code",[t._v("JavaScript 保留字")]),t._v("之一。")]),t._v(" "),a("li",[t._v("属性名包含 "),a("code",[t._v("空格")]),t._v(" 或者其他特殊字符的（包括任何 "),a("code",[t._v("除字母、数字以及下划线以外")]),t._v(" 的字符）。")]),t._v(" "),a("li",[t._v("属性名以"),a("code",[t._v("数字开头")]),t._v("。")])]),t._v(" "),a("h4",{attrs:{id:"_3-2-访问对象属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-访问对象属性","aria-hidden":"true"}},[t._v("#")]),t._v(" 3.2 访问对象属性")]),t._v(" "),a("p",[t._v("通常情况下，可以通过 中括号表示法 和 点号表示法 来访问对象属性。")]),t._v(" "),a("p",[a("strong",[t._v("(1) 中括号表示法")])]),t._v(" "),a("p",[t._v("以下情况，必须使用 中括号表示法 访问对象属性。")]),t._v(" "),a("ul",[a("li",[t._v("属性名没有一个合法的名字，规则与 属性命名规则相同。")]),t._v(" "),a("li",[t._v("访问的属性名不确定时，即通过变量访问的时候。")])]),t._v(" "),a("p",[a("strong",[t._v("(2) 点号表示法")])]),t._v(" "),a("p",[t._v("在不是上述情况的时候，推荐使用 点号表示法。")]),t._v(" "),a("p",[a("strong",[t._v("(3) 访问对象的属性对象的属性")])]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" book "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    published"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1961'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    author"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        firstname"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'DENG'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        lastname"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Jie'")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 以下四种方法都可以访问 author 中的 firatname 属性")]),t._v("\nbook"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("author"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("firstname"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nbook"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'author'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'firstname'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nbook"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("author"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'lastname'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nbook"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'author'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastname\n\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br")])]),a("h3",{attrs:{id:"_4-数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-数组","aria-hidden":"true"}},[t._v("#")]),t._v(" 4. 数组")]),t._v(" "),a("h3",{attrs:{id:"_5-类型转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-类型转换","aria-hidden":"true"}},[t._v("#")]),t._v(" 5. 类型转换")]),t._v(" "),a("p",[t._v("分为"),a("strong",[t._v("显式类型转换")]),t._v(" 与 "),a("strong",[t._v("隐式类型转换")]),t._v("。")]),t._v(" "),a("h4",{attrs:{id:"_5-1-显式类型转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-显式类型转换","aria-hidden":"true"}},[t._v("#")]),t._v(" 5.1 显式类型转换")]),t._v(" "),a("p",[t._v("显式类型转换，也称强制转换，主要指使用 "),a("code",[t._v("Number()")]),t._v("、"),a("code",[t._v("String()")]),t._v(" 和 "),a("code",[t._v("Boolean()")]),t._v(" 三个函数，手动将各种类型转换为数字、字符串或布尔值。")]),t._v(" "),a("p",[a("strong",[t._v("(1) Number()")])]),t._v(" "),a("p",[t._v("下面分两种情况讨论，一种式参数为原始类型的值，另一种是参数是对象。")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("原始类型值")])])]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 数值：转换后还是原来的值")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("324")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 324")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 字符串：如果可以被解析为数值，则转换为相应的数值")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'324'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 324")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 字符串：如果不可以被解析为数值，返回 NaN")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'324abc'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// NaN")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 空字符串转为0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 布尔值：true 转成 1，false 转成 0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// undefined：转成 NaN")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// NaN")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// null：转成0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br")])]),a("p",[a("code",[t._v("Number")]),t._v("函数将字符串转为数值，要比"),a("code",[t._v("parseInt")]),t._v("函数严格很多。基本上，只要有一个字符无法转成数值，整个字符串就会被转为"),a("code",[t._v("NaN")]),t._v("。")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'42 cats'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 42")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'42 cats'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// NaN")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[a("code",[t._v("parseInt")]),t._v(" 和 "),a("code",[t._v("Number")]),t._v(" 函数都回自动过滤一个字符串前导和后缀的空格。")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("对象")])])]),t._v(" "),a("p",[a("code",[t._v("Number")]),t._v(" 方法的参数是对象时，将返回 "),a("code",[t._v("NaN")]),t._v("，除非是包含单个数值的数组。")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// NaN")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// NaN")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 5")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("这是因为 "),a("code",[t._v("Number")]),t._v(" 背后的转换规则比较复杂。")]),t._v(" "),a("ul",[a("li",[t._v("第一步，调用自身的 "),a("code",[t._v("valueOf()")]),t._v(" 方法。返回原始类型的值，就直接对该值使用 "),a("code",[t._v("Number")]),t._v(" 函数，不再继续后续步骤。")]),t._v(" "),a("li",[t._v("第二步，如果 "),a("code",[t._v("valueOf")]),t._v(" 方法返回的还是对象，则改为调用对象自身的 "),a("code",[t._v("toString")]),t._v(" 方法。如果 "),a("code",[t._v("toString")]),t._v(" 方法返回原始类型的值，则对该值使用 "),a("code",[t._v("Number")]),t._v(" 函数，不再继续后续步骤。")]),t._v(" "),a("li",[t._v("第三步，如果 "),a("code",[t._v("toString")]),t._v(" 方法返回的是对象，就报错。")])]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// NaN")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("上述代码中，首先调用"),a("code",[t._v("obj.valueOf")]),t._v("方法, 结果返回对象本身；于是，继续调用"),a("code",[t._v("obj.toString")]),t._v("方法，这时返回字符串"),a("code",[t._v("[object Object]")]),t._v("，对这个字符串使用"),a("code",[t._v("Number")]),t._v("函数，得到"),a("code",[t._v("NaN")]),t._v("。")]),t._v(" "),a("p",[a("strong",[t._v("(2) String()")])]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("原始类型值")])]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("数值")]),t._v("：转为相应的字符串。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("字符串")]),t._v("：转换后还是原来的值。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("布尔值")]),t._v("："),a("code",[t._v("true")]),t._v("转为字符串"),a("code",[t._v('"true"')]),t._v("，"),a("code",[t._v("false")]),t._v("转为字符串"),a("code",[t._v('"false"')]),t._v("。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("undefined")]),t._v("：转为字符串"),a("code",[t._v('"undefined"')]),t._v("。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("null")]),t._v("：转为字符串"),a("code",[t._v('"null"')]),t._v("。")])])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("对象")])])])]),t._v(" "),a("p",[a("code",[t._v("String")]),t._v("方法的参数如果是对象，返回一个类型字符串；如果是数组，返回该数组的字符串形式。")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "[object Object]"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "1,2,3"')]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[a("code",[t._v("tring")]),t._v("方法背后的转换规则，与"),a("code",[t._v("Number")]),t._v("方法基本相同，只是互换了"),a("code",[t._v("valueOf")]),t._v("方法和"),a("code",[t._v("toString")]),t._v("方法的执行顺序。")]),t._v(" "),a("ul",[a("li",[t._v("先调用对象自身的"),a("code",[t._v("toString")]),t._v("方法。如果返回原始类型的值，则对该值使用"),a("code",[t._v("String")]),t._v("函数，不再进行以下步骤。")]),t._v(" "),a("li",[t._v("如果"),a("code",[t._v("toString")]),t._v("方法返回的是对象，再调用原对象的"),a("code",[t._v("valueOf")]),t._v("方法。如果"),a("code",[t._v("valueOf")]),t._v("方法返回原始类型的值，则对该值使用"),a("code",[t._v("String")]),t._v("函数，不再进行以下步骤。")]),t._v(" "),a("li",[t._v("如果"),a("code",[t._v("valueOf")]),t._v("方法返回的是对象，就报错。")])]),t._v(" "),a("p",[a("strong",[t._v("(3) Boolean()")])]),t._v(" "),a("p",[a("code",[t._v("Boolean()")]),t._v("函数可以将任意类型的值转为布尔值。")]),t._v(" "),a("p",[t._v("它的转换规则相对简单：除了以下五个值的转换结果为"),a("code",[t._v("false")]),t._v("，其他的值全部为"),a("code",[t._v("true")]),t._v("。")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("undefined")])]),t._v(" "),a("li",[a("code",[t._v("null")])]),t._v(" "),a("li",[a("code",[t._v("0")]),t._v("（包含"),a("code",[t._v("-0")]),t._v("和"),a("code",[t._v("+0")]),t._v("）")]),t._v(" "),a("li",[a("code",[t._v("NaN")])]),t._v(" "),a("li",[a("code",[t._v("''")]),t._v("（空字符串）")])]),t._v(" "),a("p",[t._v("注意，所有对象（包括空对象）的转换结果都是"),a("code",[t._v("true")]),t._v("，甚至连"),a("code",[t._v("false")]),t._v("对应的布尔对象"),a("code",[t._v("new Boolean(false)")]),t._v("也是"),a("code",[t._v("true")])]),t._v(" "),a("h4",{attrs:{id:"_5-2-隐式类型转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-隐式类型转换","aria-hidden":"true"}},[t._v("#")]),t._v(" 5.2 隐式类型转换")]),t._v(" "),a("p",[t._v("下面介绍自动转换，它是以强制转换为基础的。")]),t._v(" "),a("p",[t._v("遇到以下三种情况时，JavaScript 会自动转换数据类型，即转换是自动完成的，用户不可见。")]),t._v(" "),a("ul",[a("li",[t._v("第一种情况，不同类型的数据互相运算。")])]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abc'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "123abc"')]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("ul",[a("li",[t._v("第二种情况，对非布尔值类型的数据求布尔值。")])]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abc'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "hello"')]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("ul",[a("li",[t._v("第三种情况，对非数值类型的值使用一元运算符（即"),a("code",[t._v("+")]),t._v("和"),a("code",[t._v("-")]),t._v("）。")])]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'bar'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// NaN")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// NaN")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("自动转换的规则是这样的：预期什么类型的值，就调用该类型的转换函数。比如，某个位置预期为字符串，就调用"),a("code",[t._v("String")]),t._v("函数进行转换。如果该位置即可以是字符串，也可能是数值，那么默认转为数值。")]),t._v(" "),a("h3",{attrs:{id:"_4-regexp-正则表达式对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-regexp-正则表达式对象","aria-hidden":"true"}},[t._v("#")]),t._v(" 4. RegExp 正则表达式对象")]),t._v(" "),a("h4",{attrs:{id:"_4-1-匹配模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-匹配模式","aria-hidden":"true"}},[t._v("#")]),t._v(" 4.1 匹配模式")]),t._v(" "),a("p",[t._v("斜杠符内编写正则表达式文本，结束斜杠符的右边指定匹配模式。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("匹配模式")]),t._v(" "),a("th",[t._v("作用")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("G")]),t._v(" "),a("td",[t._v("全局匹配（匹配到一个结果之后还会向后继续匹配，直到结束）")])]),t._v(" "),a("tr",[a("td",[t._v("I")]),t._v(" "),a("td",[t._v("匹配过程忽略大小写")])]),t._v(" "),a("tr",[a("td",[t._v("M")]),t._v(" "),a("td",[t._v("多行匹配模式（默认情况下，开始符 ^ 与结束符 $ 工作在单行模式，将只匹配"),a("br"),t._v("整个文本的开始与结束，配置这个参数后，会匹配每一行的开始与结束）")])])])]),t._v(" "),a("h4",{attrs:{id:"_4-2-特殊字符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-特殊字符","aria-hidden":"true"}},[t._v("#")]),t._v(" 4.2 特殊字符")]),t._v(" "),a("p",[t._v("某一个特殊字符可以代表某一类字符。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("字符")]),t._v(" "),a("th",[t._v("含义")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v(".")]),t._v(" "),a("td",[t._v("匹配任意字符")])]),t._v(" "),a("tr",[a("td",[t._v("\\d")]),t._v(" "),a("td",[t._v("匹配 0~9的任意一个数字字符")])]),t._v(" "),a("tr",[a("td",[t._v("\\D")]),t._v(" "),a("td",[t._v("匹配任意一个不是数字的字符")])]),t._v(" "),a("tr",[a("td",[t._v("\\w")]),t._v(" "),a("td",[t._v("匹配任意一个字母、数字或下划线字符")])]),t._v(" "),a("tr",[a("td",[t._v("\\W")]),t._v(" "),a("td",[t._v("匹配任意一个非字母、非数字或非下划线的字符")])]),t._v(" "),a("tr",[a("td",[t._v("\\s")]),t._v(" "),a("td",[t._v("匹配任意一个空白符，包括换行符、制表符、空格、换页符等")])]),t._v(" "),a("tr",[a("td",[t._v("\\S")]),t._v(" "),a("td",[t._v("匹配任意一个非空白符")])]),t._v(" "),a("tr",[a("td",[t._v("\\t")]),t._v(" "),a("td",[t._v("匹配一个水平制表符")])]),t._v(" "),a("tr",[a("td",[t._v("\\r")]),t._v(" "),a("td",[t._v("匹配一个回车符")])]),t._v(" "),a("tr",[a("td",[t._v("\\n")]),t._v(" "),a("td",[t._v("匹配一个换行符")])]),t._v(" "),a("tr",[a("td",[t._v("\\v")]),t._v(" "),a("td",[t._v("匹配一个垂直制表符")])]),t._v(" "),a("tr",[a("td",[t._v("\\f")]),t._v(" "),a("td",[t._v("匹配一个换页符")])]),t._v(" "),a("tr",[a("td",[t._v("[\\b]")]),t._v(" "),a("td",[t._v("匹配一个退格符")])]),t._v(" "),a("tr",[a("td",[t._v("\\0")]),t._v(" "),a("td",[t._v("匹配一个NUL字符")])]),t._v(" "),a("tr",[a("td",[t._v("\\xhh")]),t._v(" "),a("td",[t._v("匹配一个编码为 hh 的字符（十六进制）")])]),t._v(" "),a("tr",[a("td",[t._v("\\uhhhh")]),t._v(" "),a("td",[t._v("匹配一个 Unicode 值为 hhhh 的字符")])])])]),t._v(" "),a("h4",{attrs:{id:"_4-3-字符集合"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-字符集合","aria-hidden":"true"}},[t._v("#")]),t._v(" 4.3 字符集合")]),t._v(" "),a("p",[t._v("字符集合用于匹配某个集合内的字符。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("字符集合")]),t._v(" "),a("th",[t._v("含义")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("[abc]")]),t._v(" "),a("td",[t._v("匹配括号内的一个字符")])]),t._v(" "),a("tr",[a("td",[t._v("[a-b]")]),t._v(" "),a("td",[t._v("匹配范围内的字符")])]),t._v(" "),a("tr",[a("td",[t._v("[^abc]")]),t._v(" "),a("td",[t._v("匹配除了集合字符外的所有字符")])]),t._v(" "),a("tr",[a("td",[t._v("[^a-b]")]),t._v(" "),a("td",[t._v("匹配除了集合范围外的所有字符")])])])]),t._v(" "),a("h4",{attrs:{id:"_4-4-定义边界和数量的字符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-定义边界和数量的字符","aria-hidden":"true"}},[t._v("#")]),t._v(" 4.4 定义边界和数量的字符")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("边界")])])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("字符")]),t._v(" "),a("th",[t._v("含义")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("^")]),t._v(" "),a("td",[t._v("匹配字符串开头")])]),t._v(" "),a("tr",[a("td",[t._v("$")]),t._v(" "),a("td",[t._v("匹配字符串结尾")])])])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("数量")])])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("字符")]),t._v(" "),a("th",[t._v("含义")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("x*")]),t._v(" "),a("td",[t._v("匹配 0 次或多次 x 字符")])]),t._v(" "),a("tr",[a("td",[t._v("x+")]),t._v(" "),a("td",[t._v("匹配 1 次或多次 x 字符")])]),t._v(" "),a("tr",[a("td",[t._v("x?")]),t._v(" "),a("td",[t._v("匹配  0 次或 1 次 x 字符")])]),t._v(" "),a("tr",[a("td",[t._v("x(?!y)")]),t._v(" "),a("td",[t._v("当 x 字符后面不是 y 字符才开始匹配")])]),t._v(" "),a("tr",[a("td",[t._v("x|y")]),t._v(" "),a("td",[t._v("匹配字符 x 或字符 y")])]),t._v(" "),a("tr",[a("td",[t._v("x{n}")]),t._v(" "),a("td",[t._v("匹配连续 n 个  x")])]),t._v(" "),a("tr",[a("td",[t._v("x{n,}")]),t._v(" "),a("td",[t._v("匹配至少连续 n 个  x")])]),t._v(" "),a("tr",[a("td",[t._v("x{n,m}")]),t._v(" "),a("td",[t._v("匹配连续出现 n~m 个  x")])])])])])}),[],!1,null,null,null);s.default=e.exports}}]);